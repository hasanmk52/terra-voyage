generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(cuid())
  email                 String          @unique
  name                  String?
  image                 String?
  emailVerified         DateTime?
  preferences           Json?
  onboardingCompleted   Boolean         @default(false)
  onboardingCompletedAt DateTime?
  travelStyle           String?
  interests             String?
  travelPreferences     String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  bio                   String?
  city                  String?
  country               String?
  dateOfBirth           DateTime?
  phone                 String?
  profilePicture        Bytes?
  profilePictureType    String?
  accounts              Account[]
  collaborations        Collaboration[]
  comments              Comment[]
  sentInvitations       Invitation[]    @relation("InvitationSender")
  invitations           Invitation[]
  notifications         Notification[]
  sessions              Session[]
  statusHistory         StatusHistory[]
  trips                 Trip[]
  votes                 Vote[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Trip {
  id                String          @id @default(cuid())
  userId            String
  title             String
  destination       String
  destinationCoords Json?
  description       String?
  startDate         DateTime
  endDate           DateTime
  budget            Float?
  travelers         Int             @default(1)
  status            TripStatus      @default(DRAFT)
  isPublic          Boolean         @default(false)
  coverImage        String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  currency          String?         @default("USD")
  activities        Activity[]
  collaborations    Collaboration[]
  comments          Comment[]
  days              Day[]
  invitations       Invitation[]
  itineraryData     ItineraryData?
  notifications     Notification[]
  sharedTrip        SharedTrip?
  statusHistory     StatusHistory[]
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes             Vote[]

  @@index([userId])
  @@index([status])
  @@index([startDate])
  @@map("trips")
}

model Day {
  id             String     @id @default(cuid())
  tripId         String
  dayNumber      Int
  date           String
  theme          String?
  dailyBudget    Json?
  transportation Json?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  activities     Activity[]
  trip           Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, dayNumber])
  @@index([tripId])
  @@index([dayNumber])
  @@map("days")
}

model Activity {
  id              String        @id @default(cuid())
  tripId          String
  dayId           String?
  name            String
  description     String?
  location        String?
  address         String?
  coordinates     Json?
  startTime       String?
  endTime         String?
  timeSlot        String?
  type            ActivityType  @default(OTHER)
  price           Float?
  currency        String?       @default("USD")
  priceType       String?
  duration        String?
  tips            Json?
  bookingRequired Boolean       @default(false)
  bookingStatus   BookingStatus @default(NOT_BOOKED)
  bookingUrl      String?
  accessibility   Json?
  notes           String?
  order           Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  day             Day?          @relation(fields: [dayId], references: [id])
  trip            Trip          @relation(fields: [tripId], references: [id], onDelete: Cascade)
  comments        Comment[]
  votes           Vote[]

  @@index([tripId])
  @@index([dayId])
  @@index([type])
  @@index([timeSlot])
  @@map("activities")
}

model Collaboration {
  id         String            @id @default(cuid())
  tripId     String
  userId     String
  role       CollaborationRole @default(VIEWER)
  invitedBy  String?
  invitedAt  DateTime          @default(now())
  acceptedAt DateTime?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  trip       Trip              @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
  @@index([tripId])
  @@index([userId])
  @@map("collaborations")
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  userId     String
  tripId     String?
  activityId String?
  parentId   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  trip       Trip?     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([activityId])
  @@index([userId])
  @@map("comments")
}

model Vote {
  id         String    @id @default(cuid())
  userId     String
  tripId     String?
  activityId String?
  value      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  trip       Trip?     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tripId])
  @@unique([userId, activityId])
  @@index([tripId])
  @@index([activityId])
  @@map("votes")
}

model Invitation {
  id          String            @id @default(cuid())
  token       String            @unique @default(cuid())
  email       String
  tripId      String
  userId      String?
  invitedById String
  role        CollaborationRole @default(VIEWER)
  status      InvitationStatus  @default(PENDING)
  message     String?
  expiresAt   DateTime
  acceptedAt  DateTime?
  declinedAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  invitedBy   User              @relation("InvitationSender", fields: [invitedById], references: [id], onDelete: Cascade)
  trip        Trip              @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user        User?             @relation(fields: [userId], references: [id])

  @@unique([tripId, email])
  @@index([token])
  @@index([tripId])
  @@index([email])
  @@index([status])
  @@map("invitations")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  tripId    String?
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  trip      Trip?            @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tripId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

model ItineraryData {
  id              String   @id @default(cuid())
  tripId          String   @unique
  rawData         Json
  metadata        Json?
  generalTips     Json?
  emergencyInfo   Json?
  budgetBreakdown Json?
  generatedAt     DateTime @default(now())
  updatedAt       DateTime @updatedAt
  trip            Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([generatedAt])
  @@map("itinerary_data")
}

model SharedTrip {
  id              String    @id @default(cuid())
  tripId          String    @unique
  shareToken      String    @unique
  isPublic        Boolean   @default(true)
  expiresAt       DateTime?
  allowComments   Boolean   @default(false)
  showContactInfo Boolean   @default(false)
  showBudget      Boolean   @default(false)
  passwordHash    String?
  viewCount       Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  trip            Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([shareToken])
  @@index([isPublic])
  @@index([expiresAt])
  @@map("shared_trips")
}

model StatusHistory {
  id        String      @id @default(cuid())
  tripId    String
  oldStatus TripStatus?
  newStatus TripStatus
  reason    String
  userId    String?
  metadata  Json?
  timestamp DateTime    @default(now())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  trip      Trip        @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id])

  @@index([tripId])
  @@index([userId])
  @@index([newStatus])
  @@index([timestamp])
  @@index([tripId, timestamp])
  @@map("status_history")
}

enum TripStatus {
  DRAFT
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ActivityType {
  ACCOMMODATION
  TRANSPORTATION
  RESTAURANT
  ATTRACTION
  EXPERIENCE
  SHOPPING
  OTHER
}

enum CollaborationRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum BookingStatus {
  NOT_BOOKED
  PENDING
  CONFIRMED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum NotificationType {
  TRIP_INVITATION
  TRIP_UPDATE
  COMMENT_ADDED
  VOTE_ADDED
  ACTIVITY_CHANGED
  MEMBER_JOINED
  MEMBER_LEFT
}
